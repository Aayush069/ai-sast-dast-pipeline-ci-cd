{
  "issues": [
    {
      "tool": "bandit",
      "file": "./app.py",
      "start_line": 26,
      "end_line": 26,
      "start_column": 15,
      "end_column": 15,
      "severity": "MEDIUM",
      "level": "warning",
      "confidence": "HIGH",
      "rule_id": "B307",
      "message": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "cwe": 78,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b307-eval",
      "code": "25     code = request.args.get(\"code\")\n26     return str(eval(code))  # \u26a0\ufe0f Arbitrary code execution\n27 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "start_line": 32,
      "end_line": 32,
      "start_column": 11,
      "end_column": 11,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "B602",
      "message": "subprocess call with shell=True identified, security issue.",
      "cwe": 78,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "code": "31     cmd = request.args.get(\"cmd\")\n32     return subprocess.check_output(cmd, shell=True).decode()  # \u26a0\ufe0f Shell injection\n33 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "start_line": 38,
      "end_line": 38,
      "start_column": 15,
      "end_column": 15,
      "severity": "MEDIUM",
      "level": "warning",
      "confidence": "HIGH",
      "rule_id": "B301",
      "message": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "cwe": 502,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "code": "37     data = request.data\n38     return str(pickle.loads(data))  # \u26a0\ufe0f Arbitrary code execution\n39 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "start_line": 51,
      "end_line": 51,
      "start_column": 11,
      "end_column": 11,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "B324",
      "message": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "cwe": 327,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "code": "50     password = request.form[\"password\"]\n51     return hashlib.md5(password.encode()).hexdigest()  # \u26a0\ufe0f Weak hashing\n52 \n"
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "start_line": 25,
      "end_line": 26,
      "start_column": 5,
      "end_column": 27,
      "severity": "WARNING",
      "level": "warning",
      "confidence": "MEDIUM",
      "rule_id": "python.django.security.injection.code.user-eval.user-eval",
      "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "source_url": "https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval",
      "code": "    code = request.args.get(\"code\")\n    return str(eval(code))  # \u26a0\ufe0f Arbitrary code execution"
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "start_line": 44,
      "end_line": 44,
      "start_column": 13,
      "end_column": 60,
      "severity": "ERROR",
      "level": "error",
      "confidence": "MEDIUM",
      "rule_id": "python.jwt.security.jwt-none-alg.jwt-python-none-alg",
      "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.",
      "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
      "source_url": "https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg",
      "code": "    token = jwt.encode(payload, key=None, algorithm=\"none\")"
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "start_line": 56,
      "end_line": 57,
      "start_column": 5,
      "end_column": 33,
      "severity": "ERROR",
      "level": "error",
      "confidence": "MEDIUM",
      "rule_id": "python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.",
      "cwe": "CWE-918: Server-Side Request Forgery (SSRF)",
      "source_url": "https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
      "code": "    url = request.args.get(\"url\")\n    response = requests.get(url)  # \u26a0\ufe0f SSRF"
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "start_line": 57,
      "end_line": 57,
      "start_column": 16,
      "end_column": 33,
      "severity": "ERROR",
      "level": "error",
      "confidence": "MEDIUM",
      "rule_id": "python.flask.security.injection.ssrf-requests.ssrf-requests",
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.",
      "cwe": "CWE-918: Server-Side Request Forgery (SSRF)",
      "source_url": "https://semgrep.dev/r/python.flask.security.injection.ssrf-requests.ssrf-requests",
      "code": "    response = requests.get(url)  # \u26a0\ufe0f SSRF"
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "start_line": 61,
      "end_line": 61,
      "start_column": 5,
      "end_column": 24,
      "severity": "INFO",
      "level": "note",
      "confidence": "HIGH",
      "rule_id": "python.flask.debug.debug-flask.active-debug-code-flask",
      "message": "The application is running debug code or has debug mode enabled. This may expose sensitive information, like stack traces and environment variables, to attackers. It may also modify application behavior, potentially enabling attackers to bypass restrictions. To remediate this finding, ensure that the application's debug code and debug mode are disabled or removed from the production environment.",
      "cwe": "CWE-489: Active Debug Code",
      "source_url": "https://semgrep.dev/r/python.flask.debug.debug-flask.active-debug-code-flask",
      "code": "    app.run(debug=True)"
    },
    {
      "tool": "gitleaks",
      "file": "tests/reports/combined_issues.json",
      "start_line": 385,
      "end_line": 385,
      "start_column": 17,
      "end_column": 51,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "generic-api-key",
      "message": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
      "cwe": null,
      "source_url": null,
      "code": "DB_PASSWORD=8ae31cacf141669ddfb5da\""
    },
    {
      "tool": "gitleaks",
      "file": "tests/reports/deduplicated_issues.json",
      "start_line": 183,
      "end_line": 183,
      "start_column": 17,
      "end_column": 51,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "generic-api-key",
      "message": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
      "cwe": null,
      "source_url": null,
      "code": "DB_PASSWORD=8ae31cacf141669ddfb5da\""
    },
    {
      "tool": "gitleaks",
      "file": "tests/reports/gitleaks_report.json",
      "start_line": 29,
      "end_line": 29,
      "start_column": 14,
      "end_column": 48,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "generic-api-key",
      "message": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
      "cwe": null,
      "source_url": null,
      "code": "DB_PASSWORD=8ae31cacf141669ddfb5da\""
    },
    {
      "tool": "gitleaks",
      "file": "tests/reports/gitleaks_report.json",
      "start_line": 30,
      "end_line": 30,
      "start_column": 5,
      "end_column": 37,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "generic-api-key",
      "message": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
      "cwe": null,
      "source_url": null,
      "code": "Secret\": \"8ae31cacf141669ddfb5da\""
    },
    {
      "tool": "gitleaks",
      "file": "README.md",
      "start_line": 481,
      "end_line": 481,
      "start_column": 15,
      "end_column": 48,
      "severity": "HIGH",
      "level": "error",
      "confidence": "HIGH",
      "rule_id": "generic-api-key",
      "message": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
      "cwe": null,
      "source_url": null,
      "code": "DB_PASSWORD=8ae31cacf141669ddfb5da"
    }
  ]
}