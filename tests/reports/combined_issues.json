{
  "issues": [
    {
      "tool": "bandit",
      "file": "./app.py",
      "line": 26,
      "column": 15,
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "rule_id": "B307",
      "message": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "cwe": 78,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b307-eval",
      "code": "25     code = request.args.get(\"code\")\n26     return str(eval(code))  # \u26a0\ufe0f Arbitrary code execution\n27 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "line": 32,
      "column": 11,
      "severity": "HIGH",
      "confidence": "HIGH",
      "rule_id": "B602",
      "message": "subprocess call with shell=True identified, security issue.",
      "cwe": 78,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "code": "31     cmd = request.args.get(\"cmd\")\n32     return subprocess.check_output(cmd, shell=True).decode()  # \u26a0\ufe0f Shell injection\n33 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "line": 38,
      "column": 15,
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "rule_id": "B301",
      "message": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "cwe": 502,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "code": "37     data = request.data\n38     return str(pickle.loads(data))  # \u26a0\ufe0f Arbitrary code execution\n39 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "line": 51,
      "column": 11,
      "severity": "HIGH",
      "confidence": "HIGH",
      "rule_id": "B324",
      "message": "Use of weak MD5 hash for security. Consider usedforsecurity=False",
      "cwe": 327,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/plugins/b324_hashlib.html",
      "code": "50     password = request.form[\"password\"]\n51     return hashlib.md5(password.encode()).hexdigest()  # \u26a0\ufe0f Weak hashing\n52 \n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "line": 63,
      "column": 4,
      "severity": "HIGH",
      "confidence": "HIGH",
      "rule_id": "B605",
      "message": "Starting a process with a shell, possible injection detected, security issue.",
      "cwe": 78,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "code": "62     command = request.args.get(\"command\")\n63     os.system(command)\n64     return \"Executed\"\n"
    },
    {
      "tool": "bandit",
      "file": "./app.py",
      "line": 68,
      "column": 15,
      "severity": "MEDIUM",
      "confidence": "HIGH",
      "rule_id": "B306",
      "message": "Use of insecure and deprecated function (mktemp).",
      "cwe": 377,
      "source_url": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b306-mktemp-q",
      "code": "67 def insecure_tempfile():\n68     filename = tempfile.mktemp()\n69     with open(filename, \"w\") as f:\n"
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 25,
      "column": 5,
      "severity": "WARNING",
      "confidence": "MEDIUM",
      "rule_id": "python.django.security.injection.code.user-eval.user-eval",
      "message": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and instead use a safe library for the specific functionality you need.",
      "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "source_url": "https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 26,
      "column": 16,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.flask.security.injection.user-eval.eval-injection",
      "message": "Detected user data flowing into eval. This is code injection and should be avoided.",
      "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "source_url": "https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 26,
      "column": 16,
      "severity": "WARNING",
      "confidence": "LOW",
      "rule_id": "python.lang.security.audit.eval-detected.eval-detected",
      "message": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.",
      "cwe": "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
      "source_url": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 32,
      "column": 12,
      "severity": "ERROR",
      "confidence": "HIGH",
      "rule_id": "python.flask.security.injection.subprocess-injection.subprocess-injection",
      "message": "Detected user input entering a `subprocess` call unsafely. This could result in a command injection vulnerability. An attacker could use this vulnerability to execute arbitrary commands on the host, which allows them to download malware, scan sensitive data, or run any command they wish on the server. Do not let users choose the command to run. In general, prefer to use Python API versions of system commands. If you must use subprocess, use a dictionary to allowlist a set of commands.",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "source_url": "https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 32,
      "column": 36,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
      "message": "Detected subprocess function 'check_output' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "source_url": "https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 32,
      "column": 47,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "message": "Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "source_url": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 38,
      "column": 16,
      "severity": "ERROR",
      "confidence": "LOW",
      "rule_id": "python.flask.security.insecure-deserialization.insecure-deserialization",
      "message": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON.",
      "cwe": "CWE-502: Deserialization of Untrusted Data",
      "source_url": "https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 38,
      "column": 16,
      "severity": "WARNING",
      "confidence": "LOW",
      "rule_id": "python.lang.security.deserialization.pickle.avoid-pickle",
      "message": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.",
      "cwe": "CWE-502: Deserialization of Untrusted Data",
      "source_url": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 44,
      "column": 13,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.jwt.security.jwt-none-alg.jwt-python-none-alg",
      "message": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.",
      "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
      "source_url": "https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 51,
      "column": 12,
      "severity": "WARNING",
      "confidence": "MEDIUM",
      "rule_id": "python.lang.security.audit.md5-used-as-password.md5-used-as-password",
      "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.",
      "cwe": "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
      "source_url": "https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 56,
      "column": 5,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery to learn more about SSRF vulnerabilities.",
      "cwe": "CWE-918: Server-Side Request Forgery (SSRF)",
      "source_url": "https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 57,
      "column": 16,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.flask.security.injection.ssrf-requests.ssrf-requests",
      "message": "Data from request object is passed to a new server-side request. This could lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes and hosts are validated against an allowlist, do not forward the response to the user, and ensure proper authentication and transport-layer security in the proxied request.",
      "cwe": "CWE-918: Server-Side Request Forgery (SSRF)",
      "source_url": "https://semgrep.dev/r/python.flask.security.injection.ssrf-requests.ssrf-requests",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 62,
      "column": 5,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
      "message": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information.",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "source_url": "https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 63,
      "column": 5,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.flask.security.injection.os-system-injection.os-system-injection",
      "message": "User data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list.",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "source_url": "https://semgrep.dev/r/python.flask.security.injection.os-system-injection.os-system-injection",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 63,
      "column": 5,
      "severity": "ERROR",
      "confidence": "MEDIUM",
      "rule_id": "python.lang.security.dangerous-system-call.dangerous-system-call",
      "message": "Found user-controlled data used in a system call. This could allow a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.",
      "cwe": "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
      "source_url": "https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call",
      "code": null
    },
    {
      "tool": "semgrep",
      "file": "app.py",
      "line": 74,
      "column": 5,
      "severity": "WARNING",
      "confidence": "HIGH",
      "rule_id": "python.flask.security.audit.debug-enabled.debug-enabled",
      "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.",
      "cwe": "CWE-489: Active Debug Code",
      "source_url": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
      "code": null
    },
    {
      "tool": "gitleaks",
      "file": "README.md",
      "line": 51,
      "column": 23,
      "severity": "HIGH",
      "confidence": "HIGH",
      "rule_id": "sidekiq-secret",
      "message": "Discovered a Sidekiq Secret, which could lead to compromised background job processing and application data breaches.",
      "cwe": null,
      "source_url": null,
      "code": "BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef\""
    },
    {
      "tool": "gitleaks",
      "file": "README.md",
      "line": 481,
      "column": 15,
      "severity": "HIGH",
      "confidence": "HIGH",
      "rule_id": "generic-api-key",
      "message": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
      "cwe": null,
      "source_url": null,
      "code": "DB_PASSWORD=8ae31cacf141669ddfb5da"
    }
  ]
}