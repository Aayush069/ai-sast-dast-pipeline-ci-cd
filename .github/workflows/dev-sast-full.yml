
# To run this on a specific PR, use:
# git fetch origin pull/<PR_NUMBER>/head:pr-<PR_NUMBER>
# git push origin pr-<PR_NUMBER>

name: Dev SAST Pipeline (Manual full run)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to scan (e.g., main, pr-123, feature/foo)'
        required: true
        default: 'main'

jobs:
  sast:
    name: Run SAST (Bandit + Semgrep + Gitleaks)
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Bandit and converter
        run: pip install bandit

      - name: Install Semgrep CLI
        run: pip install semgrep

      - name: Run Bandit
        run: |
          mkdir -p reports
          bandit -r . \
            -x tests \
            -f json \
            -o reports/bandit_report.json \
            -ll -iii || true

      - name: Run Semgrep
        run: |
          mkdir -p reports
          semgrep --config auto \
                  --exclude tests \
                  --json \
                  --output reports/semgrep_report.json || true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Install Gitleaks
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.27.2/gitleaks_8.27.2_linux_x64.tar.gz -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Run Gitleaks
        run: |
          mkdir -p reports
          gitleaks detect \
            --source . \
            --no-git \
            --report-format json \
            --report-path reports/gitleaks_report.json || true

      - name: Combine SAST JSON reports
        run: python combine_reports.py

      - name: Deduplicate issues
        run: python deduplicate_reports.py

      - name: Install dotenv and google-generativeai 
        run: pip install google-generativeai dotenv

      - name: Generate LLM resolutions
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: python get_resolutions.py

      - name: Convert to SARIF
        run: python resolution2sarif.py

      - name: Upload Bandit, Semgrep, and Gitleaks reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

      - name: Upload final_report SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/final_report.sarif
          category: ai-sast-dast-pipeline